package pidtuner;

import com.fazecast.jSerialComm.SerialPort;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import org.jfree.data.xy.XYDataItem;
import utils.Chart;
import utils.SaveCharts;
import utils.Serial;

/**
 * @author Asafe
 * @data 03/06/2017
 */
public class PIDWindow extends javax.swing.JFrame implements Serial.DataListener {

    // Chart variables
    private Chart chartInput, chartOutput;

    // Serial Port variable
    private SerialPort commPort;
    private final Serial serial;
    
    /**
     * Creates new form PIDWindow
     */
    public PIDWindow() {
        initComponents();
        
        configCharts();
        
        serial = new Serial();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelGraph = new javax.swing.JPanel();
        buttonClear = new javax.swing.JButton();
        labelTimeRange = new javax.swing.JLabel();
        spinnerTimeRange = new javax.swing.JSpinner();
        labelSampleSize = new javax.swing.JLabel();
        spinnerSampleSize = new javax.swing.JSpinner();
        buttonSaveGraph = new javax.swing.JButton();
        panelTuner = new javax.swing.JPanel();
        labelKP = new javax.swing.JLabel();
        labelKI = new javax.swing.JLabel();
        labelKD = new javax.swing.JLabel();
        labelSetPoint = new javax.swing.JLabel();
        buttonLoadPID = new javax.swing.JToggleButton();
        buttonSavePID = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        inputLabel = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        setPointLabel = new javax.swing.JLabel();
        javax.swing.SpinnerNumberModel model_KP = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKP = new javax.swing.JSpinner(model_KP);
        javax.swing.SpinnerNumberModel model_KI = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKI = new javax.swing.JSpinner(model_KI);
        javax.swing.SpinnerNumberModel model_KD = new SpinnerNumberModel(0.0, -1000.0, 1000.0, 0.01);
        spinnerKD = new javax.swing.JSpinner(model_KD);
        javax.swing.SpinnerNumberModel model_SP = new SpinnerNumberModel(0.0, -100000.0, 100000.0, 0.01);
        spinnerSetPoint = new javax.swing.JSpinner(model_SP);
        panelPIDInput = new javax.swing.JPanel();
        panelSerialConn = new javax.swing.JPanel();
        textSerialPort = new javax.swing.JTextField();
        labelPort = new javax.swing.JLabel();
        labelBaudRate = new javax.swing.JLabel();
        labelStatus = new javax.swing.JLabel();
        serialStatus = new javax.swing.JLabel();
        buttonSerialConnect = new javax.swing.JButton();
        buttonSerialDisconnect = new javax.swing.JButton();
        boxSerialBaudRate = new javax.swing.JComboBox<>();
        panelPIDOutput = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PID Tuning");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(new ImageIcon(getClass().getResource("/inserts/icon.png")).getImage());
        setResizable(false);

        panelGraph.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph"));

        buttonClear.setText("CLEAR");
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        labelTimeRange.setText("Time Range");

        spinnerTimeRange.setOpaque(false);
        spinnerTimeRange.setPreferredSize(new java.awt.Dimension(102, 20));
        spinnerTimeRange.setValue(Chart.DEFAULT_RANGE);
        spinnerTimeRange.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerTimeRangeStateChanged(evt);
            }
        });

        labelSampleSize.setText("Sample Size");

        spinnerSampleSize.setOpaque(false);
        spinnerSampleSize.setPreferredSize(new java.awt.Dimension(102, 20));
        spinnerSampleSize.setValue(3000);
        spinnerSampleSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerSampleSizeStateChanged(evt);
            }
        });

        buttonSaveGraph.setText("SAVE GRAPH");
        buttonSaveGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelGraphLayout = new javax.swing.GroupLayout(panelGraph);
        panelGraph.setLayout(panelGraphLayout);
        panelGraphLayout.setHorizontalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraphLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelGraphLayout.createSequentialGroup()
                        .addComponent(labelTimeRange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelGraphLayout.createSequentialGroup()
                        .addComponent(labelSampleSize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerSampleSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(buttonSaveGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelGraphLayout.setVerticalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraphLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTimeRange)
                    .addComponent(spinnerTimeRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSampleSize)
                    .addComponent(spinnerSampleSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSaveGraph)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        panelTuner.setBorder(javax.swing.BorderFactory.createTitledBorder("Tuner"));

        labelKP.setText("KP (Proportional)");
        labelKP.setPreferredSize(new java.awt.Dimension(14, 14));

        labelKI.setText("KI (Integrative)");
        labelKI.setPreferredSize(new java.awt.Dimension(14, 14));

        labelKD.setText("KD (Derivative)");
        labelKD.setPreferredSize(new java.awt.Dimension(14, 14));

        labelSetPoint.setText("Set Point");

        buttonLoadPID.setText("LOAD DATA");
        buttonLoadPID.setPreferredSize(new java.awt.Dimension(99, 23));
        buttonLoadPID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLoadPIDActionPerformed(evt);
            }
        });

        buttonSavePID.setText("SAVE DATA");
        buttonSavePID.setPreferredSize(new java.awt.Dimension(99, 23));
        buttonSavePID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSavePIDActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("PID INPUT:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("PID OUTPUT:");

        inputLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputLabel.setText("0");

        outputLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        outputLabel.setText("0");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("PID SETPOINT:");

        setPointLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        setPointLabel.setText("0");

        javax.swing.JSpinner.NumberEditor editor_KP = (javax.swing.JSpinner.NumberEditor)spinnerKP.getEditor();
        java.text.DecimalFormat format_KP = editor_KP.getFormat();
        format_KP.setMinimumFractionDigits(2);
        spinnerKP.setPreferredSize(new java.awt.Dimension(102, 20));
        spinnerKP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKPStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editor_KI = (javax.swing.JSpinner.NumberEditor)spinnerKI.getEditor();
        java.text.DecimalFormat format_KI = editor_KI.getFormat();
        format_KI.setMinimumFractionDigits(2);
        spinnerKI.setPreferredSize(new java.awt.Dimension(102, 20));
        spinnerKI.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKIStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editor_KD = (javax.swing.JSpinner.NumberEditor)spinnerKD.getEditor();
        java.text.DecimalFormat format_KD = editor_KD.getFormat();
        format_KD.setMinimumFractionDigits(2);
        spinnerKD.setPreferredSize(new java.awt.Dimension(102, 20));
        spinnerKD.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerKDStateChanged(evt);
            }
        });

        javax.swing.JSpinner.NumberEditor editor_SP = (javax.swing.JSpinner.NumberEditor)spinnerSetPoint.getEditor();
        java.text.DecimalFormat format_SP = editor_SP.getFormat();
        format_SP.setMinimumFractionDigits(2);
        spinnerSetPoint.setPreferredSize(new java.awt.Dimension(102, 20));
        spinnerSetPoint.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerSetPointStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelTunerLayout = new javax.swing.GroupLayout(panelTuner);
        panelTuner.setLayout(panelTunerLayout);
        panelTunerLayout.setHorizontalGroup(
            panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTunerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTunerLayout.createSequentialGroup()
                        .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(buttonLoadPID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelSetPoint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelKD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelKI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelKP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSavePID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelTunerLayout.createSequentialGroup()
                                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spinnerKP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerKI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerKD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerSetPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jSeparator1)
                    .addGroup(panelTunerLayout.createSequentialGroup()
                        .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(setPointLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelTunerLayout.setVerticalGroup(
            panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTunerLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spinnerKP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelKD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinnerKD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSetPoint)
                    .addComponent(spinnerSetPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSavePID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonLoadPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(setPointLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(inputLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTunerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(outputLabel))
                .addContainerGap())
        );

        panelPIDInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout panelPIDInputLayout = new javax.swing.GroupLayout(panelPIDInput);
        panelPIDInput.setLayout(panelPIDInputLayout);
        panelPIDInputLayout.setHorizontalGroup(
            panelPIDInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 748, Short.MAX_VALUE)
        );
        panelPIDInputLayout.setVerticalGroup(
            panelPIDInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        panelSerialConn.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Serial Connection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        textSerialPort.setText("COM");
        textSerialPort.setPreferredSize(new java.awt.Dimension(80, 20));

        labelPort.setText("Port (ex: COM3)");

        labelBaudRate.setText("Baud Rate");

        labelStatus.setText("STATUS:");

        serialStatus.setForeground(new java.awt.Color(153, 0, 0));
        serialStatus.setText("DISCONNECTED");

        buttonSerialConnect.setText("CONNECT");
        buttonSerialConnect.setPreferredSize(new java.awt.Dimension(97, 23));
        buttonSerialConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSerialConnectActionPerformed(evt);
            }
        });

        buttonSerialDisconnect.setText("DISCONNECT");
        buttonSerialDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSerialDisconnectActionPerformed(evt);
            }
        });

        boxSerialBaudRate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "9600", "19200", "38400", "57600", "74880", "115200", "230400", "250000" }));
        boxSerialBaudRate.setToolTipText("");

        javax.swing.GroupLayout panelSerialConnLayout = new javax.swing.GroupLayout(panelSerialConn);
        panelSerialConn.setLayout(panelSerialConnLayout);
        panelSerialConnLayout.setHorizontalGroup(
            panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSerialConnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSerialConnLayout.createSequentialGroup()
                        .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelPort)
                            .addComponent(labelBaudRate))
                        .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelSerialConnLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textSerialPort, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelSerialConnLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(boxSerialBaudRate, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(panelSerialConnLayout.createSequentialGroup()
                        .addComponent(buttonSerialConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonSerialDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelSerialConnLayout.createSequentialGroup()
                        .addComponent(labelStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(serialStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSerialConnLayout.setVerticalGroup(
            panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSerialConnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPort)
                    .addComponent(textSerialPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBaudRate)
                    .addComponent(boxSerialBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSerialConnect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonSerialDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelSerialConnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStatus)
                    .addComponent(serialStatus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelPIDOutput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        javax.swing.GroupLayout panelPIDOutputLayout = new javax.swing.GroupLayout(panelPIDOutput);
        panelPIDOutput.setLayout(panelPIDOutputLayout);
        panelPIDOutputLayout.setHorizontalGroup(
            panelPIDOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 748, Short.MAX_VALUE)
        );
        panelPIDOutputLayout.setVerticalGroup(
            panelPIDOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelTuner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSerialConn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPIDInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelPIDOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelPIDInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelPIDOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSerialConn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(panelGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(panelTuner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panelTuner.getAccessibleContext().setAccessibleName("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSavePIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSavePIDActionPerformed
        JFileChooser file = new JFileChooser();
        int result = file.showSaveDialog(this);
        
        if(result == JFileChooser.APPROVE_OPTION){
            String nameFile = file.getCurrentDirectory().toString() + "\\" + file.getSelectedFile().getName();
            try {
                FileWriter writer = new FileWriter(nameFile);
                writer.write("KP\t" + String.format("%.2f", spinnerKP.getValue()).replace(',', '.') + "\r\n");
                writer.write("KI\t" + String.format("%.2f", spinnerKI.getValue()).replace(',', '.') + "\r\n");
                writer.write("KD\t" + String.format("%.2f", spinnerKD.getValue()).replace(',', '.'));
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(PIDWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_buttonSavePIDActionPerformed

    private void buttonLoadPIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLoadPIDActionPerformed
        JFileChooser file = new JFileChooser();
        int result = file.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            String nameFile = file.getCurrentDirectory().toString() + "\\" + file.getSelectedFile().getName();
            try {
                FileReader reader = new FileReader(nameFile);
                BufferedReader bufferedReader = new BufferedReader(reader);
                
                String[] line;
                
                line = bufferedReader.readLine().split("\t");
                spinnerKP.setValue(Double.valueOf(line[1]));
                line = bufferedReader.readLine().split("\t");
                spinnerKI.setValue(Double.valueOf(line[1]));
                line = bufferedReader.readLine().split("\t");
                spinnerKD.setValue(Double.valueOf(line[1]));
                            
                reader.close();
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(PIDWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(PIDWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_buttonLoadPIDActionPerformed

    private void spinnerKPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKPStateChanged
        try{
            String number = spinnerKP.getValue().toString();
            number = String.format("%.2f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKP.setValue(Double.parseDouble(number));
            
            serial.writeData(Serial.KP + number + Serial.END);
        } catch(NumberFormatException e){
            spinnerKP.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKPStateChanged

    private void spinnerKIStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKIStateChanged
        try{
            String number = spinnerKI.getValue().toString();
            number = String.format("%.2f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKI.setValue(Double.parseDouble(number));
            
            serial.writeData(Serial.KI + number + Serial.END);
        } catch(NumberFormatException e){
            spinnerKI.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKIStateChanged

    private void spinnerKDStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerKDStateChanged
        try{
            String number = spinnerKD.getValue().toString();
            number = String.format("%.2f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerKD.setValue(Double.parseDouble(number));
            
            serial.writeData(Serial.KD + number + Serial.END);
        } catch(NumberFormatException e){
            spinnerKD.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerKDStateChanged

    private void spinnerSetPointStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerSetPointStateChanged
        try{
            String number = spinnerSetPoint.getValue().toString();
            number = String.format("%.2f", Double.parseDouble(number)).replace(',', '.');
            
            spinnerSetPoint.setValue(Double.parseDouble(number));
            
            serial.writeData(Serial.SP + number + Serial.END);
        } catch(NumberFormatException e){
            spinnerSetPoint.setValue(Double.parseDouble("0"));
        }
    }//GEN-LAST:event_spinnerSetPointStateChanged

    private void buttonSerialConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSerialConnectActionPerformed
        if (commPort != null && commPort.isOpen()) {
            commPort.closePort();                                               // If it is connected, disconnect
        }

        commPort = SerialPort.getCommPort(
                textSerialPort.getText().toUpperCase());                        // Create a new SerialPort object
        commPort.setBaudRate(
                Integer.parseInt((String) boxSerialBaudRate.getSelectedItem()));// Set BaudRate

        if (!commPort.openPort()) {                                             // Try to open connection!
            serialStatus.setForeground(Color.RED);                              // Update STATUS color      
            serialStatus.setText("ERROR OCCURRED");                             // Update STATUS text
            return;
        }

        serial.setSerialPort(commPort);                                         // Copies Serial Port object to Serial class 
        serial.initListener(this);                                              // Starts Listener to receive datas

        serialStatus.setForeground(Color.GREEN);                                // Update STATUS color   
        serialStatus.setText("CONNECTED");                                      // Update STATUS text
    }//GEN-LAST:event_buttonSerialConnectActionPerformed

    private void buttonSerialDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSerialDisconnectActionPerformed
        if (commPort != null) {
            if (commPort.isOpen()) {
                commPort.removeDataListener();                                  // Remove event listener to Serial Port
                commPort.closePort();                                           // If there's connection, cancels

                commPort = null;
                serial.stopListener();

                serialStatus.setForeground(Color.RED);                          // Update STATUS color 
                serialStatus.setText("DISCONNECTED");                           // Update STATUS text
            }
        }
    }//GEN-LAST:event_buttonSerialDisconnectActionPerformed

    private void spinnerTimeRangeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerTimeRangeStateChanged
        try {
            int range = Integer.parseInt(spinnerTimeRange.getValue().toString());
            chartInput.setFixedAutoRange(range);
            chartOutput.setFixedAutoRange(range);
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_spinnerTimeRangeStateChanged

    private void spinnerSampleSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerSampleSizeStateChanged
        try {
            int value = Integer.parseInt(spinnerSampleSize.getValue().toString());

            chartInput.setMaximumItemCount(value);
            chartOutput.setMaximumItemCount(value);
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_spinnerSampleSizeStateChanged

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        chartInput.clearAll();
        chartOutput.clearAll();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonSaveGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveGraphActionPerformed
        ArrayList<Chart> charts = new ArrayList<>();
        
        charts.add(chartInput);
        charts.add(chartOutput);

        SaveCharts.save(this, charts);
    }//GEN-LAST:event_buttonSaveGraphActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
//            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PIDWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PIDWindow().setVisible(true);
            }
        });

    }
    
    private void configCharts() {
        // ==== Configuration of the Charts ==== //

        //---- Chart INPUT ----
        chartInput = new Chart(panelPIDInput, "Input - SetPoint");
        chartInput.addChart("Input");
        chartInput.addChart("SetPoint");
        chartInput.setChartDataListener((String name1, XYDataItem dataItem) -> {
            float value = dataItem.getY().floatValue();
            if (name1.equals("Input")) {
                inputLabel.setText(Float.toString(value));
            } else if (name1.equals("SetPoint")) {
                setPointLabel.setText(Float.toString(value));
            }
        });
        chartInput.initialize();
                
        //---- Chart OUTPUT ----
        chartOutput = new Chart(panelPIDOutput, "Output");
        chartOutput.addChart("Output");
        chartOutput.setChartDataListener((String name1, XYDataItem dataItem) -> {
            float value = dataItem.getY().floatValue();
            if (name1.equals("Output")) {
                outputLabel.setText(Float.toString(value));
            }
        });
        chartOutput.initialize();
        // == end Configuration of the Charts == //
        
    }

    @Override
    public void onDataListener(String parameter, float value) {
        float X = 0.1f;

        switch (parameter) {
            case Serial.INPUT:
                chartInput.addData("Input", new XYDataItem(chartInput.getXAxisValue() * X + X, value));
                break;
            case Serial.SETPOINT:
                chartInput.addData("SetPoint", new XYDataItem(chartInput.getXAxisValue() * X + X, value));
                break;
            case Serial.OUTPUT:
                chartOutput.addData("Output", new XYDataItem(chartOutput.getXAxisValue() * X * 2 + X, value));
                break;
            default:
                break;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxSerialBaudRate;
    private javax.swing.JButton buttonClear;
    private javax.swing.JToggleButton buttonLoadPID;
    private javax.swing.JButton buttonSaveGraph;
    private javax.swing.JButton buttonSavePID;
    private javax.swing.JButton buttonSerialConnect;
    private javax.swing.JButton buttonSerialDisconnect;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelBaudRate;
    private javax.swing.JLabel labelKD;
    private javax.swing.JLabel labelKI;
    private javax.swing.JLabel labelKP;
    private javax.swing.JLabel labelPort;
    private javax.swing.JLabel labelSampleSize;
    private javax.swing.JLabel labelSetPoint;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelTimeRange;
    private javax.swing.JLabel outputLabel;
    private javax.swing.JPanel panelGraph;
    private javax.swing.JPanel panelPIDInput;
    private javax.swing.JPanel panelPIDOutput;
    private javax.swing.JPanel panelSerialConn;
    private javax.swing.JPanel panelTuner;
    private javax.swing.JLabel serialStatus;
    private javax.swing.JLabel setPointLabel;
    private javax.swing.JSpinner spinnerKD;
    private javax.swing.JSpinner spinnerKI;
    private javax.swing.JSpinner spinnerKP;
    private javax.swing.JSpinner spinnerSampleSize;
    private javax.swing.JSpinner spinnerSetPoint;
    private javax.swing.JSpinner spinnerTimeRange;
    private javax.swing.JTextField textSerialPort;
    // End of variables declaration//GEN-END:variables

}
